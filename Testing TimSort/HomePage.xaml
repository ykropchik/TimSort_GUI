<Page
    x:Class="Testing_TimSort.HomePage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:Testing_TimSort"
    mc:Ignorable="d">
    
    <Grid Padding="24 0 24 0">
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <TextBlock Grid.Row="0" Grid.Column="0" FontSize="40" Text="TimSort" Padding="24 12 0 24"/>
        <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" FontSize="16" Height="auto" Width="auto" TextWrapping="WrapWholeWords" >
            TimSort - гибридный алгоритм сортировки, разработанный Тимом Питерсом в 2002 года, и сочетающий в себе сортировку вставками и сортировку слиянием.
            В настоящий момент алгоритм является стандартным алгоритмом сортировки Python, OpenJDK и реализован в Android SDK 1.5.
            Идея алгоритма строится на идеи, что в реальном мире сортируемые массивы данных зачастую содержат в себе упорядоченные подмассивы.
            На таких наборах данных алгоритм TimSort показывает наилучшие результаты, по сравнению с другими алгоритмами сортировок.
        </TextBlock>
        <Grid Grid.Row="1" Grid.Column="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
        
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="0" Grid.ColumnSpan="2" Grid.Column="0" TextAlignment="Center" Margin="0 0 0 12">
                Эффективность:
            </TextBlock>
            
            <TextBlock Grid.Row="1" Grid.Column="0" TextAlignment="Right" Margin="0 0 24 8">
                Лучшее время: 
            </TextBlock>
            <Image Grid.Row="1" Grid.Column="1" Source="Assets/n.png" Height="20" HorizontalAlignment="Left"/>
            
            <TextBlock Grid.Row="2" Grid.Column="0" TextAlignment="Right" Margin="0 0 24 8">
                Худшее время: 
            </TextBlock>
            <Image Grid.Row="2" Grid.Column="1" Source="Assets/nlogn.png" Height="20" HorizontalAlignment="Left"/>
            
            <TextBlock Grid.Row="3" Grid.Column="0" TextAlignment="Right" Margin="0 0 24 8">
                Среднее время: 
            </TextBlock>
            <Image Grid.Row="3" Grid.Column="1" Source="Assets/nlogn.png" Height="20" HorizontalAlignment="Left"/>
        </Grid>
        
        <TextBlock Grid.Row="2" Grid.Column="0" FontSize="40" Text="Вставки" Padding="24 12 0 24" TextAlignment="Left"/>
        <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3" FontSize="16" Height="auto" Width="auto" TextWrapping="WrapWholeWords" Padding="12 0 24 0">
            Сортировка вставками - алгоритм сортировки, в котором элементы входной последовательности просматриваются по одному, и каждый новый поступивший элемент
            размещается в подходящее место среди ранее упорядоченных элементов. Алгоритм прост в реализации, преимущественно используется в учебном программировании.
            К положительной стороне метода относится простота реализации, а также его эффективность на частично упорядоченных последовательностях, и/или состоящих из небольшого числа элементов. 
            Тем не менее, высокая вычислительная сложность не позволяет рекомендовать алгоритм в повсеместном использовании
        </TextBlock>
        <Grid Grid.Row="3" Grid.Column="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
        
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="0" Grid.ColumnSpan="2" Grid.Column="0" TextAlignment="Center" Margin="0 0 0 12">
                Эффективность:
            </TextBlock>
            
            <TextBlock Grid.Row="1" Grid.Column="0" TextAlignment="Right" Margin="0 0 24 8">
                Лучшее время: 
            </TextBlock>
            <Image Grid.Row="1" Grid.Column="1" Source="Assets/n.png" Height="20" HorizontalAlignment="Left"/>
            
            <TextBlock Grid.Row="2" Grid.Column="0" TextAlignment="Right" Margin="0 0 24 8">
                Худшее время: 
            </TextBlock>
            <Image Grid.Row="2" Grid.Column="1" Source="Assets/n^2.png" Height="20" HorizontalAlignment="Left"/>
            
            <TextBlock Grid.Row="3" Grid.Column="0" TextAlignment="Right" Margin="0 0 24 8">
                Среднее время: 
            </TextBlock>
            <Image Grid.Row="3" Grid.Column="1" Source="Assets/n^2.png" Height="20" HorizontalAlignment="Left"/>
        </Grid>
        
        <TextBlock Grid.Row="4" Grid.Column="0" FontSize="40" Text="Слияние" Padding="24 12 0 24" TextAlignment="left"/>
        <TextBlock Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="3" FontSize="16" Height="auto" Width="auto" TextWrapping="WrapWholeWords" Padding="12 0 24 0">
            Сортировка вставками - алгоритм сортировки, который упорядочивает списки (или другие структуры данных, доступ к элементам которых можно получать только последовательно, например — потоки)
            в определённом порядке. Эта сортировка — хороший пример использования принципа «разделяй и властвуй». Сначала задача разбивается на несколько подзадач меньшего размера.
            Затем эти задачи решаются с помощью рекурсивного вызова или непосредственно, если их размер достаточно мал. Наконец, их решения комбинируются, и получается решение исходной задачи.
        </TextBlock>
        <Grid Grid.Row="5" Grid.Column="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
        
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="0" Grid.ColumnSpan="2" Grid.Column="0" TextAlignment="Center" Margin="0 0 0 12">
                Эффективность:
            </TextBlock>
            
            <TextBlock Grid.Row="1" Grid.Column="0" TextAlignment="Right" Margin="0 0 24 8">
                Лучшее время: 
            </TextBlock>
            <Image Grid.Row="1" Grid.Column="1" Source="Assets/nlogn.png" Height="20" HorizontalAlignment="Left"/>
            
            <TextBlock Grid.Row="2" Grid.Column="0" TextAlignment="Right" Margin="0 0 24 8">
                Худшее время: 
            </TextBlock>
            <Image Grid.Row="2" Grid.Column="1" Source="Assets/nlogn.png" Height="20" HorizontalAlignment="Left"/>
            
            <TextBlock Grid.Row="3" Grid.Column="0" TextAlignment="Right" Margin="0 0 24 8">
                Среднее время: 
            </TextBlock>
            <Image Grid.Row="3" Grid.Column="1" Source="Assets/nlogn.png" Height="20" HorizontalAlignment="Left"/>
        </Grid>
    </Grid>
</Page>
